// Code generated by "enumer -type LogFormat -trimprefix Format -transform lower -text"; DO NOT EDIT.

package config

import (
	"fmt"
	"strings"
)

const _LogFormatName = "autocolorplainjson"

var _LogFormatIndex = [...]uint8{0, 4, 9, 14, 18}

const _LogFormatLowerName = "autocolorplainjson"

func (i LogFormat) String() string {
	if i >= LogFormat(len(_LogFormatIndex)-1) {
		return fmt.Sprintf("LogFormat(%d)", i)
	}
	return _LogFormatName[_LogFormatIndex[i]:_LogFormatIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _LogFormatNoOp() {
	var x [1]struct{}
	_ = x[FormatAuto-(0)]
	_ = x[FormatColor-(1)]
	_ = x[FormatPlain-(2)]
	_ = x[FormatJSON-(3)]
}

var _LogFormatValues = []LogFormat{FormatAuto, FormatColor, FormatPlain, FormatJSON}

var _LogFormatNameToValueMap = map[string]LogFormat{
	_LogFormatName[0:4]:        FormatAuto,
	_LogFormatLowerName[0:4]:   FormatAuto,
	_LogFormatName[4:9]:        FormatColor,
	_LogFormatLowerName[4:9]:   FormatColor,
	_LogFormatName[9:14]:       FormatPlain,
	_LogFormatLowerName[9:14]:  FormatPlain,
	_LogFormatName[14:18]:      FormatJSON,
	_LogFormatLowerName[14:18]: FormatJSON,
}

var _LogFormatNames = []string{
	_LogFormatName[0:4],
	_LogFormatName[4:9],
	_LogFormatName[9:14],
	_LogFormatName[14:18],
}

// LogFormatString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LogFormatString(s string) (LogFormat, error) {
	if val, ok := _LogFormatNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _LogFormatNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to LogFormat values", s)
}

// LogFormatValues returns all values of the enum
func LogFormatValues() []LogFormat {
	return _LogFormatValues
}

// LogFormatStrings returns a slice of all String values of the enum
func LogFormatStrings() []string {
	strs := make([]string, len(_LogFormatNames))
	copy(strs, _LogFormatNames)
	return strs
}

// IsALogFormat returns "true" if the value is listed in the enum definition. "false" otherwise
func (i LogFormat) IsALogFormat() bool {
	for _, v := range _LogFormatValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for LogFormat
func (i LogFormat) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for LogFormat
func (i *LogFormat) UnmarshalText(text []byte) error {
	var err error
	*i, err = LogFormatString(string(text))
	return err
}
