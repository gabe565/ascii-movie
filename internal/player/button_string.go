// Code generated by "enumer -type Button -linecomment -output button_string.go"; DO NOT EDIT.

package player

import (
	"fmt"
	"strings"
)

const _ButtonName = "<<<<<<|>||>>>>>>"

var _ButtonIndex = [...]uint8{0, 3, 5, 6, 10, 11, 13, 16}

const _ButtonLowerName = "<<<<<<|>||>>>>>>"

func (i Button) String() string {
	if i >= Button(len(_ButtonIndex)-1) {
		return fmt.Sprintf("Button(%d)", i)
	}
	return _ButtonName[_ButtonIndex[i]:_ButtonIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ButtonNoOp() {
	var x [1]struct{}
	_ = x[Button3xRewind-(0)]
	_ = x[Button2xRewind-(1)]
	_ = x[Button1xRewind-(2)]
	_ = x[ButtonPlayPause-(3)]
	_ = x[Button1xForward-(4)]
	_ = x[Button2xForward-(5)]
	_ = x[Button3xForward-(6)]
}

var _ButtonValues = []Button{Button3xRewind, Button2xRewind, Button1xRewind, ButtonPlayPause, Button1xForward, Button2xForward, Button3xForward}

var _ButtonNameToValueMap = map[string]Button{
	_ButtonName[0:3]:        Button3xRewind,
	_ButtonLowerName[0:3]:   Button3xRewind,
	_ButtonName[3:5]:        Button2xRewind,
	_ButtonLowerName[3:5]:   Button2xRewind,
	_ButtonName[5:6]:        Button1xRewind,
	_ButtonLowerName[5:6]:   Button1xRewind,
	_ButtonName[6:10]:       ButtonPlayPause,
	_ButtonLowerName[6:10]:  ButtonPlayPause,
	_ButtonName[10:11]:      Button1xForward,
	_ButtonLowerName[10:11]: Button1xForward,
	_ButtonName[11:13]:      Button2xForward,
	_ButtonLowerName[11:13]: Button2xForward,
	_ButtonName[13:16]:      Button3xForward,
	_ButtonLowerName[13:16]: Button3xForward,
}

var _ButtonNames = []string{
	_ButtonName[0:3],
	_ButtonName[3:5],
	_ButtonName[5:6],
	_ButtonName[6:10],
	_ButtonName[10:11],
	_ButtonName[11:13],
	_ButtonName[13:16],
}

// ButtonString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ButtonString(s string) (Button, error) {
	if val, ok := _ButtonNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ButtonNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Button values", s)
}

// ButtonValues returns all values of the enum
func ButtonValues() []Button {
	return _ButtonValues
}

// ButtonStrings returns a slice of all String values of the enum
func ButtonStrings() []string {
	strs := make([]string, len(_ButtonNames))
	copy(strs, _ButtonNames)
	return strs
}

// IsAButton returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Button) IsAButton() bool {
	for _, v := range _ButtonValues {
		if i == v {
			return true
		}
	}
	return false
}
