// Code generated by "enumer -type Option -linecomment -output option_string.go"; DO NOT EDIT.

package player

import (
	"fmt"
	"strings"
)

const _OptionName = "<<<<<<|>||>>>>>>"

var _OptionIndex = [...]uint8{0, 3, 5, 6, 10, 11, 13, 16}

const _OptionLowerName = "<<<<<<|>||>>>>>>"

func (i Option) String() string {
	if i >= Option(len(_OptionIndex)-1) {
		return fmt.Sprintf("Option(%d)", i)
	}
	return _OptionName[_OptionIndex[i]:_OptionIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OptionNoOp() {
	var x [1]struct{}
	_ = x[Option3xRewind-(0)]
	_ = x[Option2xRewind-(1)]
	_ = x[Option1xRewind-(2)]
	_ = x[OptionPlayPause-(3)]
	_ = x[Option1xForward-(4)]
	_ = x[Option2xForward-(5)]
	_ = x[Option3xForward-(6)]
}

var _OptionValues = []Option{Option3xRewind, Option2xRewind, Option1xRewind, OptionPlayPause, Option1xForward, Option2xForward, Option3xForward}

var _OptionNameToValueMap = map[string]Option{
	_OptionName[0:3]:        Option3xRewind,
	_OptionLowerName[0:3]:   Option3xRewind,
	_OptionName[3:5]:        Option2xRewind,
	_OptionLowerName[3:5]:   Option2xRewind,
	_OptionName[5:6]:        Option1xRewind,
	_OptionLowerName[5:6]:   Option1xRewind,
	_OptionName[6:10]:       OptionPlayPause,
	_OptionLowerName[6:10]:  OptionPlayPause,
	_OptionName[10:11]:      Option1xForward,
	_OptionLowerName[10:11]: Option1xForward,
	_OptionName[11:13]:      Option2xForward,
	_OptionLowerName[11:13]: Option2xForward,
	_OptionName[13:16]:      Option3xForward,
	_OptionLowerName[13:16]: Option3xForward,
}

var _OptionNames = []string{
	_OptionName[0:3],
	_OptionName[3:5],
	_OptionName[5:6],
	_OptionName[6:10],
	_OptionName[10:11],
	_OptionName[11:13],
	_OptionName[13:16],
}

// OptionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OptionString(s string) (Option, error) {
	if val, ok := _OptionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OptionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Option values", s)
}

// OptionValues returns all values of the enum
func OptionValues() []Option {
	return _OptionValues
}

// OptionStrings returns a slice of all String values of the enum
func OptionStrings() []string {
	strs := make([]string, len(_OptionNames))
	copy(strs, _OptionNames)
	return strs
}

// IsAOption returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Option) IsAOption() bool {
	for _, v := range _OptionValues {
		if i == v {
			return true
		}
	}
	return false
}
